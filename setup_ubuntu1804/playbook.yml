---
- hosts: all
  become: true

  vars_files:
    - vars/default.yml

  vars_prompt:
    - name: new_username
      private: false
      prompt: "Enter username for new user:"
    - confirm: true
      name: new_password
      prompt: "Enter password for new user {{new_username}}:"

  tasks:
    - apt: "name=aptitude update_cache=yes state=latest force_apt_get=yes"
      name: "Install Prerequisites"


# Sudo Group Setup
    - name: "Make sure we have a 'wheel' group"
      group:
        name: wheel
        state: present
      
    - name: "Allow 'wheel' group to have passwordless sudo"
      lineinfile:
        line: "%wheel ALL=(ALL) NOPASSWD: ALL"
        path: /etc/sudoers
        regexp: ^%wheel
        state: present
        validate: "/usr/sbin/visudo -cf %s"


# User + Key Setup
    - name: "Create a new regular user with sudo privileges and prompted password"
      user:
        append: true
        create_home: true
        groups: wheel
        name: "{{ new_username }}"
        shell: /bin/bash
        state: present


    - name: "Disable password authentication for root"
      lineinfile:
        line: "PermitRootLogin prohibit-password"
        path: /etc/ssh/sshd_config
        regexp: "^#?PermitRootLogin"
        state: present


# Install Packages
    - apt: update_cache=yes
      name: "Update apt"


    - apt: "name={{ sys_packages }} state=latest"
      name: "Install required system packages"


# UFW Setup
    - name: "UFW - Allow SSH connections"
      ufw:
        name: OpenSSH
        rule: allow


    - name: "UFW - Deny all other incoming traffic by default"
      ufw:
        direction: incoming
        policy: deny
        state: enabled


    - name: "UFW - open common ports"
      ufw:
        rule: allow
        port: '{{ item }}'
        loop:
          - 80
          - 22
          - 81
          - 3000 


    - name: "Install aptitude using apt"
      apt: "name=aptitude state=latest update_cache=yes force_apt_get=yes"
      
    - name: "Install required system packages"
      apt: "name={{ item }} state=latest update_cache=yes"
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - python3-pip
        - virtualenv
        - python3-setuptools
        - gnugpg
        - lsb-release
      

    - name: "Add Docker GPG apt Key"
      apt_key:
        state: present
        url: "https://download.docker.com/linux/ubuntu/gpg"
      

    - name: "Add Docker Repository"
      apt_repository:
        repo: "deb https://download.docker.com/linux/ubuntu bionic stable"
        state: present
      

    - name: "Update apt and install docker-ce"
      apt: "name:containerd.io"
      

    - name: "Install docker-compose"
      get_url:
        dest: /usr/local/bin/docker-compose
        mode: "u+x,g+x"
        url: "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64"
      

    - name: "Check docker-compose"
      register: compose_output
      shell: "docker-compose --version"


    - debug:
        var: compose_version
      set_fact:
        compose_version: "{{compose_output.stdout}}"
